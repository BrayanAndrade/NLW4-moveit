{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Brayan\\\\Desktop\\\\NLW#4\\\\moveit-next\\\\src\\\\contexts\\\\CountdownContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from './ChallengesContext';\nexport var CountdownContext = /*#__PURE__*/createContext({});\nvar countdownTimeout;\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge;\n\n  var _useState = useState(0.1 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      IsActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n    set;\n  }\n\n  useEffect(function () {\n    if (IsActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (IsActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [IsActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      IsActive: IsActive,\n      startCountdown: startCountdown,\n      resetCountdown: resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CountdownProvider, \"HYspE8CDhw3yTGFspbsuNu1Oa/w=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["C:/Users/Brayan/Desktop/NLW#4/moveit-next/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","IsActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","set","setTimeout"],"mappings":";;;;;AAAA,SAAQA,aAAR,EAAkCC,UAAlC,EAA8CC,SAA9C,EAAyDC,QAAzD,QAAwE,OAAxE;AACA,SAAQC,iBAAR,QAAgC,qBAAhC;AAgBA,OAAO,IAAOC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAvC;AAKP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,OAA+D;AAAA;;AAAA,MAAnCC,QAAmC,QAAnCA,QAAmC;;AAAA,oBACtCP,UAAU,CAACG,iBAAD,CAD4B;AAAA,MAC3DK,iBAD2D,eAC3DA,iBAD2D;;AAAA,kBAI1CN,QAAQ,CAAC,MAAM,EAAP,CAJkC;AAAA,MAI3DO,IAJ2D;AAAA,MAIrDC,OAJqD;;AAAA,mBAKlCR,QAAQ,CAAC,KAAD,CAL0B;AAAA,MAK3DS,QAL2D;AAAA,MAKjDC,WALiD;;AAAA,mBAM5BV,QAAQ,CAAC,KAAD,CANoB;AAAA,MAM3DW,WAN2D;AAAA,MAM9CC,cAN8C;;AAOlE,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACtBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAED,WAASQ,cAAT,GAAyB;AACrBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACAY,IAAAA,GAAG;AACN;;AAEDrB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACvBJ,MAAAA,gBAAgB,GAAGkB,UAAU,CAAC,YAAM;AAC/Bb,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF2B,EAEzB,IAFyB,CAA7B;AAGF,KAJD,MAIO,IAAGE,QAAQ,IAAKF,IAAI,KAAK,CAAzB,EAA4B;AAC/BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAEpB;AACJ,GAXQ,EAWN,CAACG,QAAD,EAAWF,IAAX,CAXM,CAAT;AAeA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BM,MAAAA,OAAO,EAAPA,OAD8B;AAE9BG,MAAAA,OAAO,EAAPA,OAF8B;AAG9BL,MAAAA,WAAW,EAAXA,WAH8B;AAI9BF,MAAAA,QAAQ,EAARA,QAJ8B;AAK9BQ,MAAAA,cAAc,EAAdA,cAL8B;AAM9BC,MAAAA,cAAc,EAAdA;AAN8B,KAAlC;AAAA,cAQKb;AARL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GAhDeD,iB;;KAAAA,iB","sourcesContent":["import {createContext, ReactNode, useContext, useEffect, useState} from \"react\";\r\nimport {ChallengesContext} from './ChallengesContext'\r\n\r\ninterface CountdownContextData {\r\n    minutes: number;\r\n    seconds: number;\r\n    hasFinished: boolean;\r\n    IsActive: boolean;\r\n    startCountdown: () => void;\r\n    resetCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\n\r\nexport const  CountdownContext = createContext({} as CountdownContextData)\r\n\r\n\r\n   \r\n   \r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport function CountdownProvider({children}: CountdownProviderProps) {\r\n    const {startNewChallenge} = useContext(ChallengesContext);\r\n\r\n\r\n    const [time, setTime] = useState(0.1 * 60);\r\n    const [IsActive, setIsActive] = useState(false);\r\n    const [hasFinished, setHasFinished] = useState(false);\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = time % 60;\r\n\r\n    function startCountdown() {\r\n        setIsActive(true);\r\n    }\r\n\r\n    function resetCountdown(){\r\n        clearTimeout(countdownTimeout);\r\n        setIsActive(false);\r\n        setTime(0.1 * 60);\r\n        set\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (IsActive && time > 0) {\r\n           countdownTimeout = setTimeout(() => {\r\n                setTime(time - 1);\r\n            }, 1000)\r\n        } else if(IsActive &&  time === 0) {\r\n            setHasFinished(true);\r\n            setIsActive(false);\r\n            startNewChallenge();\r\n\r\n        }\r\n    }, [IsActive, time])\r\n\r\n\r\n\r\n    return (\r\n        <CountdownContext.Provider value={{\r\n            minutes,\r\n            seconds,\r\n            hasFinished,\r\n            IsActive,\r\n            startCountdown,\r\n            resetCountdown\r\n        }}>\r\n            {children}\r\n        </CountdownContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}